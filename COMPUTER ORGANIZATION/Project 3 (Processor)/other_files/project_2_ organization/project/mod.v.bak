module mod(
    input wire [31:0] A,
    input wire [31:0] B,
    input wire clk,
    input wire reset,
    output wire [31:0] Result
);
module mod_cu (
    input wire clk,
    input wire reset,
    input wire temp_geq_B,
    output reg [1:0] state
);

    parameter S1 = 2'b00, S2 = 2'b01, S3 = 2'b10;

    always @(posedge clk or posedge reset) begin
        if (reset) state <= S1;
        else case (state)
            S1: state <= S2;
            S2: state <= temp_geq_B ? S2 : S3;
            S3: state <= S1;
            default: state <= S1;
        endcase
    end

endmodule
module mod_dp (
    input wire [31:0] A,
    input wire [31:0] B,
    input wire [1:0] state,
    input wire clk,
    output reg [31:0] Result
);

    reg [31:0] Temp;
    wire [31:0] sub;
    assign sub = Temp - B;

    always @(posedge clk) begin
        case (state)
            2'b00: Temp <= A;
            2'b01: Temp <= sub;
            2'b10: Result <= Temp;
        endcase
    end

endmodule



    wire [1:0] state;
    wire temp_geq_B;
    reg [31:0] Temp;

    mod_cu CU (.clk(clk), .reset(reset), .temp_geq_B(temp_geq_B), .state(state));
    mod_dp DP (.A(A), .B(B), .state(state), .clk(clk), .Result(Result));

    assign temp_geq_B = Temp >= B;
endmodule
